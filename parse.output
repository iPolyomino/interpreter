Nonterminals useless in grammar

   expression
   expression2
   expression3
   expression4
   exp_variable
   exp_function
   explist
   statement
   st_assign
   st_list
   stlist
   st_if
   st_while
   st_return
   st_function


Terminals unused in grammar

   lex_KW_IF
   lex_KW_ELSE
   lex_KW_WHILE
   lex_KW_RETURN
   lex_PLUS
   lex_MINUS
   lex_STAR
   lex_SLASH
   lex_PERCENT
   lex_AND
   lex_EQ
   lex_EQEQ
   lex_NE
   lex_LT
   lex_GT
   lex_LE
   lex_GE
   lex_COMMA
   lex_SEMICOLON
   lex_LPAREN
   lex_RPAREN
   lex_LBRACE
   lex_RBRACE
   lex_LBRACK
   lex_RBRACK
   lex_INT
   lex_CHAR


Rules useless in grammar

    5 expression: expression2
    6           | expression lex_LT expression2
    7           | expression lex_GT expression2
    8           | expression lex_LE expression2
    9           | expression lex_GE expression2
   10           | expression lex_EQEQ expression2
   11           | expression lex_NE expression2

   12 expression2: expression3
   13            | lex_PLUS expression3
   14            | lex_MINUS expression3
   15            | expression2 lex_PLUS expression3
   16            | expression2 lex_MINUS expression3

   17 expression3: expression4
   18            | expression3 lex_STAR expression4
   19            | expression3 lex_SLASH expression4
   20            | expression3 lex_PERCENT expression4

   21 expression4: lex_INT
   22            | lex_CHAR
   23            | exp_variable
   24            | lex_LPAREN expression lex_RPAREN
   25            | exp_function

   26 exp_variable: lex_ID

   27 exp_function: lex_ID lex_LPAREN explist lex_RPAREN

   28 explist: %empty
   29        | expression
   30        | explist lex_COMMA expression

   31 statement: st_assign
   32          | lex_LBRACE st_list lex_RBRACE
   33          | st_if
   34          | st_while
   35          | st_return
   36          | st_function

   37 st_assign: exp_variable lex_EQ expression lex_SEMICOLON

   38 st_list: stlist

   39 stlist: %empty
   40       | stlist statement

   41 st_if: lex_KW_IF lex_LPAREN expression lex_RPAREN statement
   42      | lex_KW_IF lex_LPAREN expression lex_RPAREN statement lex_KW_ELSE statement

   43 st_while: lex_KW_WHILE lex_LPAREN expression lex_RPAREN statement

   44 st_return: lex_KW_RETURN expression lex_SEMICOLON

   45 st_function: lex_ID lex_LPAREN explist lex_RPAREN lex_SEMICOLON


Grammar

    0 $accept: program $end

    1 program: variable_dcl

    2 variable_dcl: type lex_ID

    3 type: lex_KW_INT
    4     | lex_KW_CHAR


Terminals, with rules where they appear

$end (0) 0
error (256)
lex_KW_INT (258) 3
lex_KW_CHAR (259) 4
lex_KW_IF (260)
lex_KW_ELSE (261)
lex_KW_WHILE (262)
lex_KW_RETURN (263)
lex_PLUS (264)
lex_MINUS (265)
lex_STAR (266)
lex_SLASH (267)
lex_PERCENT (268)
lex_AND (269)
lex_EQ (270)
lex_EQEQ (271)
lex_NE (272)
lex_LT (273)
lex_GT (274)
lex_LE (275)
lex_GE (276)
lex_COMMA (277)
lex_SEMICOLON (278)
lex_LPAREN (279)
lex_RPAREN (280)
lex_LBRACE (281)
lex_RBRACE (282)
lex_LBRACK (283)
lex_RBRACK (284)
lex_INT (285)
lex_CHAR (286)
lex_ID (287) 2


Nonterminals, with rules where they appear

$accept (33)
    on left: 0
program (34)
    on left: 1, on right: 0
variable_dcl (35)
    on left: 2, on right: 1
type (36)
    on left: 3 4, on right: 2


State 0

    0 $accept: . program $end

    lex_KW_INT   shift, and go to state 1
    lex_KW_CHAR  shift, and go to state 2

    program       go to state 3
    variable_dcl  go to state 4
    type          go to state 5


State 1

    3 type: lex_KW_INT .

    $default  reduce using rule 3 (type)


State 2

    4 type: lex_KW_CHAR .

    $default  reduce using rule 4 (type)


State 3

    0 $accept: program . $end

    $end  shift, and go to state 6


State 4

    1 program: variable_dcl .

    $default  reduce using rule 1 (program)


State 5

    2 variable_dcl: type . lex_ID

    lex_ID  shift, and go to state 7


State 6

    0 $accept: program $end .

    $default  accept


State 7

    2 variable_dcl: type lex_ID .

    $default  reduce using rule 2 (variable_dcl)
