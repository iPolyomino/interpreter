Nonterminals useless in grammar

   expression
   expression2
   expression3
   expression4
   exp_variable
   exp_function
   explist


Terminals unused in grammar

   lex_KW_INT
   lex_KW_CHAR
   lex_KW_IF
   lex_KW_ELSE
   lex_KW_WHILE
   lex_KW_RETURN
   lex_PLUS
   lex_MINUS
   lex_STAR
   lex_SLASH
   lex_PERCENT
   lex_AND
   lex_EQ
   lex_EQEQ
   lex_NE
   lex_LT
   lex_GT
   lex_LE
   lex_GE
   lex_COMMA
   lex_SEMICOLON
   lex_LPAREN
   lex_RPAREN
   lex_LBRACK
   lex_RBRACK
   lex_INT
   lex_CHAR
   lex_ID


Rules useless in grammar

   14 expression: expression2
   15           | expression lex_LT expression2
   16           | expression lex_GT expression2
   17           | expression lex_LE expression2
   18           | expression lex_GE expression2
   19           | expression lex_EQEQ expression2
   20           | expression lex_NE expression2

   21 expression2: expression3
   22            | lex_PLUS expression3
   23            | lex_MINUS expression3
   24            | expression2 lex_PLUS expression3
   25            | expression2 lex_MINUS expression3

   26 expression3: expression4
   27            | expression3 lex_STAR expression4
   28            | expression3 lex_SLASH expression4
   29            | expression3 lex_PERCENT expression4

   30 expression4: lex_INT
   31            | lex_CHAR
   32            | exp_variable
   33            | lex_LPAREN expression lex_RPAREN
   34            | exp_function

   35 exp_variable: lex_ID

   36 exp_function: lex_ID lex_LPAREN explist lex_RPAREN

   37 explist: %empty
   38        | expression
   39        | explist lex_COMMA expression


Rules useless in parser due to conflicts

   10 st_if: %empty

   11 st_while: %empty

   12 st_return: %empty

   13 st_function: %empty


State 0 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: statement

    2 statement: st_assign
    3          | lex_LBRACE st_list lex_RBRACE
    4          | st_if
    5          | st_while
    6          | st_return
    7          | st_function

    8 st_assign: %empty

    9 st_list: %empty

   10 st_if: %empty

   11 st_while: %empty

   12 st_return: %empty

   13 st_function: %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
lex_KW_INT (258)
lex_KW_CHAR (259)
lex_KW_IF (260)
lex_KW_ELSE (261)
lex_KW_WHILE (262)
lex_KW_RETURN (263)
lex_PLUS (264)
lex_MINUS (265)
lex_STAR (266)
lex_SLASH (267)
lex_PERCENT (268)
lex_AND (269)
lex_EQ (270)
lex_EQEQ (271)
lex_NE (272)
lex_LT (273)
lex_GT (274)
lex_LE (275)
lex_GE (276)
lex_COMMA (277)
lex_SEMICOLON (278)
lex_LPAREN (279)
lex_RPAREN (280)
lex_LBRACE (281) 3
lex_RBRACE (282) 3
lex_LBRACK (283)
lex_RBRACK (284)
lex_INT (285)
lex_CHAR (286)
lex_ID (287)


Nonterminals, with rules where they appear

$accept (33)
    on left: 0
program (34)
    on left: 1, on right: 0
statement (35)
    on left: 2 3 4 5 6 7, on right: 1
st_assign (36)
    on left: 8, on right: 2
st_list (37)
    on left: 9, on right: 3
st_if (38)
    on left: 10, on right: 4
st_while (39)
    on left: 11, on right: 5
st_return (40)
    on left: 12, on right: 6
st_function (41)
    on left: 13, on right: 7


State 0

    0 $accept: . program $end

    lex_LBRACE  shift, and go to state 1

    $end      reduce using rule 8 (st_assign)
    $end      [reduce using rule 10 (st_if)]
    $end      [reduce using rule 11 (st_while)]
    $end      [reduce using rule 12 (st_return)]
    $end      [reduce using rule 13 (st_function)]
    $default  reduce using rule 8 (st_assign)

    program      go to state 2
    statement    go to state 3
    st_assign    go to state 4
    st_if        go to state 5
    st_while     go to state 6
    st_return    go to state 7
    st_function  go to state 8


State 1

    3 statement: lex_LBRACE . st_list lex_RBRACE

    $default  reduce using rule 9 (st_list)

    st_list  go to state 9


State 2

    0 $accept: program . $end

    $end  shift, and go to state 10


State 3

    1 program: statement .

    $default  reduce using rule 1 (program)


State 4

    2 statement: st_assign .

    $default  reduce using rule 2 (statement)


State 5

    4 statement: st_if .

    $default  reduce using rule 4 (statement)


State 6

    5 statement: st_while .

    $default  reduce using rule 5 (statement)


State 7

    6 statement: st_return .

    $default  reduce using rule 6 (statement)


State 8

    7 statement: st_function .

    $default  reduce using rule 7 (statement)


State 9

    3 statement: lex_LBRACE st_list . lex_RBRACE

    lex_RBRACE  shift, and go to state 11


State 10

    0 $accept: program $end .

    $default  accept


State 11

    3 statement: lex_LBRACE st_list lex_RBRACE .

    $default  reduce using rule 3 (statement)
